import React, { useState } from 'react';
import { registerComponent, Components } from '../../lib/vulcan-lib';
import { Hits, Configure, Index, InstantSearch, SearchBox, CurrentRefinements, Pagination, connectStateResults, RefinementList } from 'react-instantsearch-dom';
import { getAlgoliaIndexName, isAlgoliaEnabled, getSearchClient } from '../../lib/algoliaUtil';
import Tab from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';
import SearchIcon from '@material-ui/icons/Search';
import { useLocation } from '../../lib/routeUtil';
import { taggingNameIsSet, taggingNamePluralCapitalSetting } from '../../lib/instanceSettings';

const styles = (theme: ThemeType): JssStyles => ({
  root: {
    width: "100%",
    maxWidth: 1200,
    margin: "auto",
    [theme.breakpoints.down('sm')]: {
      paddingTop: 24,
    }
  },
  header: {
    display: "flex",
    justifyContent: "space-between",
    padding: 8,
  },
  // columns: {
  //   display: "flex",
  //   justifyContent: "space-around",
  //   flexWrap: "wrap"
  // },
  
  tabs: {
    // maxWidth: 634,
    margin: '0 auto 40px',
    '& .MuiTab-labelContainer': {
      fontSize: '1rem'
    }
  },
  // searchList: {
  //   // width: 300,
  //   [theme.breakpoints.down('sm')]: {
  //     width: "100%",
  //     borderBottom: theme.palette.border.faint,
  //     order: 1,
  //     maxWidth: 625,
  //   },
  // },
  // usersList: {
  //   // width: 220,
  //   [theme.breakpoints.down('sm')]: {
  //     width: "100%",
  //     maxWidth: 625,
  //     borderBottom: theme.palette.border.faint,
  //     paddingBottom: 8
  //   }
  // },
  // tagsList: {
  //   // width: 220,
  //   [theme.breakpoints.down('sm')]: {
  //     width: "100%",
  //     maxWidth: 625,
  //     borderBottom: theme.palette.border.faint,
  //     paddingBottom: 8
  //   }
  // },
  searchIcon: {
    marginLeft: 12
  },
  searchInputArea: {
    display: "flex",
    alignItems: "center",
    margin: "auto",
    width: 625,
    marginLeft: "auto",
    marginRight: "auto",
    marginTop: 24,
    marginBottom: 30,
    height: 48,
    border: theme.palette.border.slightlyIntense2,
    borderRadius: 3,
    [theme.breakpoints.down('xs')]: {
      width: "100%",
      marginTop: 12,
      marginBottom: 12,
    },
    "& .ais-SearchBox": {
      display: 'inline-block',
      position: 'relative',
      width: '100%',
      marginLeft: 12,
      height: 46,
      whiteSpace: 'nowrap',
      boxSizing: 'border-box',
      fontSize: 14,
    },
    "& .ais-SearchBox-form": {
      height: '100%'
    },
    "& .ais-SearchBox-submit":{
      display: "none"
    },
    // This is a class generated by React InstantSearch, which we don't have direct control over so
    // are doing a somewhat hacky thing to style it.
    "& .ais-SearchBox-input": {
      height: "100%",
      width: "100%",
      paddingRight: 0,
      verticalAlign: "bottom",
      borderStyle: "none",
      boxShadow: "none",
      backgroundColor: "transparent",
      fontSize: 'inherit',
      "-webkit-appearance": "none",
      cursor: "text",
    },
  },
  pagination: {
    ...theme.typography.commentStyle,
    fontSize: 16,
    marginTop: 6,
    '& li': {
      padding: 8
    },
    '& .ais-Pagination-item': {
      color: theme.palette.primary.main,
    },
    '& .ais-Pagination-item--page': {
      fontWeight: 600
    },
    '& .ais-Pagination-item--selected': {
      color: theme.palette.grey[900]
    },
    '& .ais-Pagination-item--disabled': {
      color: theme.palette.grey[500]
    }
  }
})

const SearchPageTabbed = ({classes}:{
  classes: ClassesType
}) => {
  const [tab, setTab] = useState('posts')

  const { ErrorBoundary, UsersSearchHit, PostsSearchHit, CommentsSearchHit, TagsSearchHit, SequencesSearchHit, Typography } = Components

  const {query} = useLocation()
  
  const handleChangeTab = (e, value) => {
    setTab(value)
    // setKeywordSearch('')
    // history.replace({...location, hash: `#${value}`})
  }

  if (!isAlgoliaEnabled()) {
    return <div className={classes.root}>
      Search is disabled (Algolia App ID not configured on server)
    </div>
  }
  
  const hitsPerPage = 15
  
  const ResultsCount = ({ searchResults }) => {
    if (!searchResults || !searchResults.nbHits) return null
    
    // return <div>({searchResults.nbHits})</div>
    
    const start = hitsPerPage * searchResults.page + 1
    const end = Math.min(hitsPerPage * (searchResults.page + 1) + 1, searchResults.nbHits)
    
    return <div className={classes.noResults}>
      <div className={classes.noResultsText}>Showing {start}-{end} of total {searchResults.nbHits} results</div>
    </div>
  }
  const CustomStateResults = connectStateResults(ResultsCount)

  return <div className={classes.root}>
    <InstantSearch
      indexName={getAlgoliaIndexName("Posts")}
      searchClient={getSearchClient()}
    >
      <div className={classes.searchInputArea}>
        <SearchIcon className={classes.searchIcon}/>
        {/* Ignored because SearchBox is incorrectly annotated as not taking null for its reset prop, when
          * null is the only option that actually suppresses the extra X button.
         // @ts-ignore */}
        <SearchBox defaultRefinement={query.terms} reset={null} focusShortcuts={[]} autoFocus={true} />
      </div>
      <CurrentRefinements />
      <RefinementList attribute="tags" searchable />
      
      <Tabs value={tab} onChange={handleChangeTab} className={classes.tabs} textColor="primary" centered aria-label="select content type to search">
        <Tab label="Posts" value="posts" />
        <Tab label="Comments" value="comments" />
        <Tab label={taggingNameIsSet.get() ? taggingNamePluralCapitalSetting.get() : 'Tags and Wiki'} value="tags" />
        <Tab label="Sequences" value="sequences" />
        <Tab label="Users" value="users" />
      </Tabs>
      
      {tab === 'posts' && <ErrorBoundary>
        <div className={classes.searchList}>
          <Index indexName={getAlgoliaIndexName("Posts")}>
            
            <Configure hitsPerPage={hitsPerPage} />
            <Hits hitComponent={(props) => <PostsSearchHit {...props} />} />
            <Pagination showLast className={classes.pagination} />
            <CustomStateResults />
          </Index>
        </div>
      </ErrorBoundary>}
      
      {tab === 'comments' && <ErrorBoundary>
        <div className={classes.searchList}>
          <Index indexName={getAlgoliaIndexName("Comments")}>
            <Configure hitsPerPage={hitsPerPage} />
            <Hits hitComponent={(props) => <CommentsSearchHit {...props} />} />
            <Pagination showLast className={classes.pagination} />
            <CustomStateResults />
          </Index>
        </div>
      </ErrorBoundary>}
      
      {tab === 'tags' && <ErrorBoundary>
        <div className={classes.tagsList}>
          <Index indexName={getAlgoliaIndexName("Tags")}>
            <Configure hitsPerPage={hitsPerPage} />
            <Hits hitComponent={(props) => <TagsSearchHit {...props} />} />
            <Pagination showLast className={classes.pagination} />
            <CustomStateResults />
          </Index>
        </div>
      </ErrorBoundary>}
      
      {tab === 'sequences' && <ErrorBoundary>
        <div className={classes.tagsList}>
          <Index indexName={getAlgoliaIndexName("Sequences")}>
            <Configure hitsPerPage={hitsPerPage} />
            <Hits hitComponent={(props) => <SequencesSearchHit {...props} />} />
            <Pagination showLast className={classes.pagination} />
            <CustomStateResults />
          </Index>
        </div>
      </ErrorBoundary>}
        
      {tab === 'users' && <ErrorBoundary>
        <div className={classes.usersList}>
          <Index indexName={getAlgoliaIndexName("Users")}>
            <Configure hitsPerPage={hitsPerPage} />
            <Hits hitComponent={(props) => <UsersSearchHit {...props} />} />
            <Pagination showLast className={classes.pagination} />
            <CustomStateResults />
          </Index>
        </div>
      </ErrorBoundary>}
    </InstantSearch>
  </div>
}

const SearchPageTabbedComponent = registerComponent("SearchPageTabbed", SearchPageTabbed, {styles})

declare global {
  interface ComponentTypes {
    SearchPageTabbed: typeof SearchPageTabbedComponent
  }
}
