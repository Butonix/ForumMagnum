import Button from "@material-ui/core/Button";
import DialogActions from "@material-ui/core/DialogActions";
import React, { useState } from "react";
import { useNewEvents } from "../../lib/events/withNewEvents";
import { Components, registerComponent } from "../../lib/vulcan-lib";
import { useUpdateCurrentUser } from "../hooks/useUpdateCurrentUser";
import { AnalyticsContext } from "../../lib/analyticsEvents";
import { isLW } from "../../lib/instanceSettings";
import { Configure, Hits, InstantSearch, SearchBox } from "react-instantsearch-dom";
import { getElasticIndexNameWithSorting } from "../../lib/search/elasticUtil";
import { getSearchClient } from "../../lib/search/algoliaUtil";
import InfoIcon from "@material-ui/icons/Info";
import type { ExpandedSearchState } from "../search/SearchPageTabbed";
import { useCurrentUser } from "../common/withUser";

const styles = (theme: ThemeType): JssStyles => ({
  root: {
    maxWidth: 600,
    width: 'min(600px, 80vw)',
    maxHeight: 600,
    flex: 1,
    minHeight: 0,
    display: "flex",
    flexDirection: "column",
  },
  title: {
    fontFamily: theme.palette.fonts.sansSerifStack,
    color: theme.palette.grey[1000],
    fontSize: 20,
    fontWeight: 600,
    padding: 16,
  },
  resultsColumn: {
    display: "flex",
    flex: "1",
    flexDirection: "column",
    minHeight: 0,
  },
  searchIcon: {
    marginLeft: 12,
  },
  searchBoxRow: {
    display: "flex",
    alignItems: "center",
    marginBottom: 15,
    gap: "16px",
    padding: "0px 16px",
    [theme.breakpoints.down("xs")]: {
      marginBottom: 12,
    },
  },
  searchInputArea: {
    flex: 1,
    display: "flex",
    alignItems: "center",
    maxWidth: 625,
    height: 48,
    border: theme.palette.border.slightlyIntense2,
    borderRadius: 3,
    "& .ais-SearchBox": {
      display: "inline-block",
      position: "relative",
      width: "100%",
      marginLeft: 12,
      height: 46,
      whiteSpace: "nowrap",
      boxSizing: "border-box",
    },
    "& .ais-SearchBox-form": {
      height: "100%",
    },
    "& .ais-SearchBox-submit": {
      display: "none",
    },
    // This is a class generated by React InstantSearch, which we don't have direct control over so
    // are doing a somewhat hacky thing to style it.
    "& .ais-SearchBox-input": {
      height: "100%",
      width: "100%",
      paddingRight: 0,
      verticalAlign: "bottom",
      borderStyle: "none",
      boxShadow: "none",
      backgroundColor: "transparent",
      fontSize: "inherit",
      "-webkit-appearance": "none",
      cursor: "text",
      ...theme.typography.body2,
    },
  },
  searchHelp: {
    [theme.breakpoints.down("sm")]: {
      display: "none",
    },
  },
  infoIcon: {
    fontSize: 20,
    fill: theme.palette.grey[800],
  },
  resultCount: {
    fontFamily: theme.typography.fontFamily,
    fontWeight: 400,
    fontSize: 14,
    color: theme.palette.grey[700],
    marginBottom: 20,
  },
  sort: {
    borderRadius: theme.borderRadius.small,
    width: "100%",
  },
  usersList: {
    height: 1200,
    overflowY: "auto",
  },
  hit: {
    paddingLeft: 16,
    paddingRight: 16,
  }
});

const NewConversationDialog = ({ classes, onClose }: { classes: ClassesType; onClose: () => void }) => {
  const { LWDialog, ErrorBoundary, ExpandedUsersConversationSearchHit, ForumIcon, LWTooltip } = Components;
  const currentUser = useCurrentUser();
  const [searchState, setSearchState] = useState<ExpandedSearchState>({
    query: "",
    page: 1,
  });

  if (!currentUser) return null;

  return (
    <AnalyticsContext pageSectionContext="newConversationDialog">
      <LWDialog open={true} onClose={onClose}>
        <div className={classes.root}>
          <div className={classes.title}>New conversation</div>
          <InstantSearch
            indexName={getElasticIndexNameWithSorting("Users", "relevance")}
            searchClient={getSearchClient()}
            searchState={searchState}
            onSearchStateChange={setSearchState}
          >
            <div className={classes.resultsColumn}>
              <div className={classes.searchBoxRow}>
                <div className={classes.searchInputArea}>
                  <ForumIcon icon="Search" className={classes.searchIcon} />
                  {/* Ignored because SearchBox is incorrectly annotated as not taking null for its reset prop, when
                    * null is the only option that actually suppresses the extra X button.
                  // @ts-ignore */}
                  <SearchBox defaultRefinement={searchState} reset={null} focusShortcuts={[]} autoFocus={true} />
                </div>
                <LWTooltip title={`"Quotes" and -minus signs are supported.`} className={classes.searchHelp}>
                  <InfoIcon className={classes.infoIcon} />
                </LWTooltip>
              </div>

              <ErrorBoundary>
                <div className={classes.usersList}>
                  <Configure hitsPerPage={200} />
                  {/* <CustomStats className={classes.resultCount} /> */}
                  {/* <CustomScrollTo targetRef={scrollToRef}> */}
                  <Hits
                    hitComponent={(props) => (
                      <ExpandedUsersConversationSearchHit {...props} currentUser={currentUser} onClose={onClose} className={classes.hit} />
                    )}
                  />
                  {/* </CustomScrollTo> */}
                  {/* <Pagination showLast className={classes.pagination} /> */}
                </div>
              </ErrorBoundary>
            </div>
          </InstantSearch>
        </div>
      </LWDialog>
    </AnalyticsContext>
  );
};

const NewConversationDialogComponent = registerComponent("NewConversationDialog", NewConversationDialog, { styles });

declare global {
  interface ComponentTypes {
    NewConversationDialog: typeof NewConversationDialogComponent;
  }
}
