import { registerMigration } from './migrationUtils';
import ReviewVotes from '../../lib/collections/reviewVotes/collection';
import { getCostData, REVIEW_YEAR } from '../../lib/reviewUtils';
import groupBy from 'lodash/groupBy';
import { Posts } from '../../lib/collections/posts';
import Users from '../../lib/collections/users/collection';

getCostData

const getCost = (vote) => getCostData({})[vote.qualitativeScore].cost
const getValue = (vote, total) => getCostData({costTotal:total})[vote.qualitativeScore].value

function updatePost(postList, vote, total: number) {
  if (postList[vote.postId] === undefined) { 
    postList[vote.postId] = [getValue(vote, total)]
  } else {
    postList[vote.postId].push(getValue(vote, total))
  }
}

function updatePostsLists()

registerMigration({
  name: "updateReviewVotes",
  dateWritten: "2021-12-02",
  idempotent: true,
  action: async () => {
    const votes = await ReviewVotes.find({year: REVIEW_YEAR+""}).fetch()

    // we group each user's votes, so we can weight them appropriately
    // based on the user's vote cost total. 
    // 
    // also organizers them by userId to make them easier to grab later
    const votesByUserId = groupBy(votes, vote => vote.userId)

    // fetch all users who have cast one or more votes
    const users = await Users.find({_id: {$in: Object.keys(votesByUserId)}}).fetch()

    // organizes users by userId to make them easy to grab later.
    const usersByUserId = groupBy(users, user => user._id)

    // Only used during final voting phase
    // const posts = await Posts.find({reviewCount: {$gte: 1}}).fetch()
    // const postIds = posts.map(post=>post._id)

    let postsAllUsers = {}
    let postsHighKarmaUsers = {}
    let postsAFUsers = {}

    for (let userId in votesByUserId) {
      let totalUserPoints = 0 
      // eslint-disable-next-line no-console
      console.log(userId)
      const user = usersByUserId[userId][0]
      const votes = votesByUserId[userId]
      updatePostLists(user, votes, [postsAllUsers, postsAFUsers, postsHighKarmaUsers])

        // only used after final voting phase.
        //.filter(vote => postIds.includes(vote.postId)) 

      const costTotal = votes.reduce((total,vote) => total + getCost(vote), 0)
      // eslint-disable-next-line no-console
      console.log(userId, costTotal, (costTotal > 500) ? "500+" : "")
      for (let vote of votesByUserId[userId]) {
        if (!vote.qualitativeScore) continue
                
        updatePost(postsAllUsers, vote, costTotal)

        if (user.karma >= 1000) {
          updatePost(postsHighKarmaUsers, vote, costTotal)
        }
        
        if (user.groups?.includes('alignmentForum')) {
          updatePost(postsAFUsers, vote, costTotal)
        }
      }
    }


  }
})