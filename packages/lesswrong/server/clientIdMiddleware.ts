import { randomId } from '../lib/random';
import { getCookieFromReq, setCookieOnResponse } from './utils/httpUtil';
import { ClientIds } from '../lib/collections/clientIds/collection';
import type { AddMiddlewareType } from './apolloServer';
import express from 'express';

const isApplicableUrl = (url: string) =>
  url !== "/robots.txt" && url.indexOf("/api/") < 0;

// TODO:
// - [X] Check if the cookies are forwarded when the refresh request is sent to CloudFront
// - [X] Make sure this doesn't add set-cookie to requests that might be cached
// - [ ] [Pending checking for duplicates] Rewrite ensure section as an INSERT ... ON CONFLICT query
// - [ ] Deal with timezone
//    - [ ] Convert all instances of dates to use a <time> tag, so that the info is at least there for machines if needed
//    - [ ] Make it just return the wrong date to begin with (strip timezone cookie from requests that might be cached)
//    - [ ] In future: add a script that runs faster than the main react script to update all the values
// - [ ] Deal with the theme
//    - [ ] Remove the cookie if possible
// - [ ] Deal with tabId
//    - [ ] Don't set it for cacheable requests, generate it on the client instead
// - [ ] Deal with A/B tests
//    - [ ] Set a flag that this is a cacheable request, throw an error if A/B tests are used (although given the existing cache
//          doesn't do this, maybe this isn't necessary)
// - [ ] Generate a clientId cookie in the CDN for users that don't have one (one will be created on the first analytics request, so not a huge deal if this is missed)
// - [ ] Add a setting to enable the caching thing, so other instances can still set cookies if they want (or ideally infer it from the request)

const ensureClientId = async ({ existingClientId, referrer, url }: { existingClientId: string; referrer: string | null; url: string; }) => {
if (!(await ClientIds.findOne({clientId: existingClientId}, undefined, {_id: 1}))) {
    await ClientIds.rawInsert({
      clientId: existingClientId,
      firstSeenReferrer: referrer,
      firstSeenLandingPage: url,
      userIds: undefined,
    });
  }
};

/**
 * - Assign a client id if there isn't one currently assigned
 * - Ensure the client id is stored in our DB (it may have been generated by a CDN)
 */
export const addClientIdMiddleware = (addMiddleware: AddMiddlewareType) => {
  addMiddleware(function addClientId(req: express.Request, res: express.Response, next: express.NextFunction) {
    const cacheControlHeader = res.get('Cache-Control')?.toLowerCase() || '';
    const highestMaxAge = Math.max(0, ...[...cacheControlHeader.matchAll(/max-age=(\d+)/g)].map(match => parseInt(match[1], 10)))

    const existingClientId = getCookieFromReq(req, "clientId")
    const referrer = req.headers?.["referer"] ?? null;
    const url = req.url;

    // 1. If there is no client id, and this page won't be cached, create a clientId and add it to the response
    if (!existingClientId && highestMaxAge === 0) {
      const newClientId = randomId();
      setCookieOnResponse({
        req, res,
        cookieName: "clientId",
        cookieValue: newClientId,
        maxAge: 315360000
      });

      try {
        if (isApplicableUrl(req.url)) {
          void ClientIds.rawInsert({
            clientId: newClientId,
            firstSeenReferrer: referrer,
            firstSeenLandingPage: url,
            userIds: undefined,
          });
        }
      } catch(e) {
        //eslint-disable-next-line no-console
        console.error(e);
      }

    // 2. If there is a client id, ensure (asynchronously) that it is stored in the DB
    } else if (existingClientId && isApplicableUrl(req.url)) {
      // TODO switch to repo version of this once I have checked for duplicate client ids
      void ensureClientId({ existingClientId, referrer, url });
    }

    next();
  });
}
