/* eslint-disable */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    !!! AUTO-GENERATED FILE - DO NOT EDIT BY HAND !!!
    Generated by scripts/generateTanStackForms.ts
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

import React from 'react';
import { useForm } from '@tanstack/react-form';
import { Components } from '@/lib/vulcan-lib/components';
import { defineStyles, useStyles } from '@/components/hooks/useStyles';
import Button from '@/lib/vendor/@material-ui/core/src/Button';
import { preferredHeadingCase } from '@/themes/forumTheme';
import { defaultEditorPlaceholder, getDefaultLocalStorageIdGenerator } from '@/lib/editor/make_editable';

/* Shared styles for all generated forms */
const sharedFieldStyles = defineStyles('GeneratedFormFieldStyles', (theme: ThemeType) => ({
  fieldWrapper: {
    marginTop: theme.spacing.unit * 2,
    marginBottom: theme.spacing.unit * 2,
  },
}));

/* ================================================================
    Localgroups
    ================================================================
*/
export const TanStackLocalgroupsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: LocalgroupsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: LocalgroupsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, LocalgroupsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Localgroups',
    fragmentName: 'LocalgroupsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Localgroups',
    fragmentName: 'LocalgroupsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: LocalgroupsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createLocalgroup.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateLocalgroup.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="name">
            {(field) => (
              <TanStackMuiTextField
                field={field}
<<<<<<< VERSION 1
                label="Group Name"
=======
                label="Group name"
>>>>>>> END
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="nameInAnotherLanguage">
            {(field) => (
              <LWTooltip title="Useful for multilingual groups - this will help people find your group in search" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Group name in another language (optional)"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="organizerIds">
            {(field) => (
              <TanStackUserMultiselect
                field={field}
<<<<<<< VERSION 1
                label="Add Organizers"
=======
                label="Add organizers"
>>>>>>> END
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Localgroups'),
  revisionsHaveCommitMessages: false
}}
                hintText="Short description"
                fieldName="contents"
                collectionName="Localgroups"
                commentEditor={true}
                commentStyles={true}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for types */}
        <div className={classes.fieldWrapper}>
          <form.Field name="types">
            {(field) => (
              <TanStackMultiSelectButtons
                field={field}
                options={[
  { value: 'LW' },
  { value: 'SSC' },
  { value: 'EA' },
  { value: 'MIRIx' }
]}
                label="Group Type:"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for categories */}
        <div className={classes.fieldWrapper}>
          <form.Field name="categories">
            {(field) => (
              <TanStackMultiSelect
                field={field}
                placeholder="Select all that apply"
                options={[
  { value: 'national', label: 'National' },
  { value: 'regional', label: 'Regional' },
  { value: 'city', label: 'City' },
  { value: 'university', label: 'University' },
  { value: 'high-school', label: 'High School' },
  { value: 'workplace', label: 'Workplace' },
  { value: 'professional', label: 'Professional' },
  { value: 'cause-area', label: 'Cause Area' },
  { value: 'affiliation', label: 'Affiliation' }
]}
                label="Group type / intended audience"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="isOnline">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="This is an online group"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for googleLocation */}
        <div className={classes.fieldWrapper}>
          <form.Field name="googleLocation">
            {(field) => (
              <TanStackLocation
                field={field}
                stringVersionFieldName="location"
<<<<<<< VERSION 1
                label="Group Location"
=======
                label="Group location"
>>>>>>> END
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="contactInfo">
            {(field) => (
              <TanStackMuiTextField
                field={field}
<<<<<<< VERSION 1
                label="Contact Info"
=======
                label="Contact info"
>>>>>>> END
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="facebookLink">
            {(field) => (
              <LWTooltip title="https://www.facebook.com/groups/..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
<<<<<<< VERSION 1
                label="Facebook Group"
=======
                label="Facebook group"
>>>>>>> END
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="facebookPageLink">
            {(field) => (
              <LWTooltip title="https://www.facebook.com/..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
<<<<<<< VERSION 1
                label="Facebook Page"
=======
                label="Facebook page"
>>>>>>> END
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="meetupLink">
            {(field) => (
              <LWTooltip title="https://www.meetup.com/..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
<<<<<<< VERSION 1
                label="Meetup.com Group"
=======
                label="Meetup.com group"
>>>>>>> END
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="slackLink">
            {(field) => (
              <LWTooltip title="https://..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
<<<<<<< VERSION 1
                label="Slack Workspace"
=======
                label="Slack workspace"
>>>>>>> END
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="website">
            {(field) => (
              <LWTooltip title="https://..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Website"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="bannerImageId">
            {(field) => (
              <LWTooltip title="Recommend 1640x856 px, 1.91:1 aspect ratio (same as Facebook)" placement="left-start" inlineBlock={false}>
              <TanStackImageUpload
                field={field}
                croppingAspectRatio={1.91}
<<<<<<< VERSION 1
                label="Banner Image"
=======
                label="Banner image"
>>>>>>> END
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Advanced Options" collapsed={true}>
=======
      <Components.FormGroupLayout label="Advanced options" collapsed={true}>
>>>>>>> END
        <div className={classes.fieldWrapper}>
          <form.Field name="deleted">
            {(field) => (
              <LWTooltip title="Make sure you want to delete the group - it will be completely hidden from the forum." placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Deleted"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>

      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    CurationNotices
    ================================================================
*/
export const TanStackCurationNoticesForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: CurationNoticesInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: CurationNoticesInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, CurationNoticesInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'CurationNotices',
    fragmentName: 'CurationNoticesInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'CurationNotices',
    fragmentName: 'CurationNoticesInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: CurationNoticesInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createCurationNotice.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateCurationNotice.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('CurationNotices'),
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="CurationNotices"
                commentEditor={true}
                commentStyles={true}
                hideControls={true}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="deleted">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Deleted"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Comments
    ================================================================
*/
export const TanStackCommentsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: CommentsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: CommentsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, CommentsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Comments',
    fragmentName: 'CommentsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Comments',
    fragmentName: 'CommentsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: CommentsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createComment.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateComment.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: implement conditional visibility for title */}
        {/* TODO: 'EditCommentTitle' not yet ported - implement TanStackEditCommentTitle */}
        <div className={classes.fieldWrapper}>
          <form.Field name="title">
            {(field) => (
              <TanStackEditCommentTitle
                field={field}
                placeholder="Title (optional)"
                label="Title"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: false
}}
<<<<<<< VERSION 1
                hintText=undefined
=======
                hintText="Write a new comment..."
>>>>>>> END
                fieldName="contents"
                collectionName="Comments"
                commentEditor={true}
                commentStyles={true}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="promoted">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Pinned"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for relevantTagIds */}
        {/* TODO: 'FormComponentQuickTakesTags' not yet ported - implement TanStackFormComponentQuickTakesTags */}
        <div className={classes.fieldWrapper}>
          <form.Field name="relevantTagIds">
            {(field) => (
              <TanStackFormComponentQuickTakesTags
                field={field}
                label="Relevant tag ids"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for debateResponse */}
        <div className={classes.fieldWrapper}>
          <form.Field name="debateResponse">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Dialogue Response"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for af */}
        <div className={classes.fieldWrapper}>
          <form.Field name="af">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="AI Alignment Forum"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="afBaseScore">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Alignment Base Score"
              />
            )}
          </form.Field>
        </div>

      <Components.FormGroupLayout label="Moderator Options" collapsed={true}>
        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="repliesBlockedUntil">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Replies blocked until"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hideAuthor">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide author"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Alignment Options" collapsed={true}>
        {/* TODO: implement conditional visibility for reviewForAlignmentUserId */}
        <div className={classes.fieldWrapper}>
          <form.Field name="reviewForAlignmentUserId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="AF Review UserId"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>

      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    ForumEvents
    ================================================================
*/
export const TanStackForumEventsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: ForumEventsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: ForumEventsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, ForumEventsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'ForumEvents',
    fragmentName: 'ForumEventsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'ForumEvents',
    fragmentName: 'ForumEventsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: ForumEventsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createForumEvent.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateForumEvent.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="frontpageDescription">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="frontpageDescription"
                collectionName="ForumEvents"
                commentEditor={true}
                commentStyles={true}
                hideControls={true}
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="frontpageDescriptionMobile">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="frontpageDescriptionMobile"
                collectionName="ForumEvents"
                commentEditor={true}
                commentStyles={true}
                hideControls={true}
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="postPageDescription">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="postPageDescription"
                collectionName="ForumEvents"
                commentEditor={true}
                commentStyles={true}
                hideControls={true}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="title">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Title"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="startDate">
            {(field) => (
              <TanStackdatetime
                field={field}
                below={true}
                label="Start date"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="endDate">
            {(field) => (
              <TanStackdatetime
                field={field}
                below={true}
                label="End date"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'FormComponentColorPicker' not yet ported - implement TanStackFormComponentColorPicker */}
        <div className={classes.fieldWrapper}>
          <form.Field name="darkColor">
            {(field) => (
              <LWTooltip title="Used as the background of the banner for basic events. Sometimes used as a text color with \"Secondary background color\" (\"lightColor\" in the schema) as the background, so these should be roughly inverses of each other." placement="left-start" inlineBlock={false}>
              <TanStackFormComponentColorPicker
                field={field}
                label="Primary background color"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: 'FormComponentColorPicker' not yet ported - implement TanStackFormComponentColorPicker */}
        <div className={classes.fieldWrapper}>
          <form.Field name="lightColor">
            {(field) => (
              <LWTooltip title="Used as the background in some places (e.g. topic tabs) with \"Primary background color\" as the foreground, so these should be roughly inverses of each other." placement="left-start" inlineBlock={false}>
              <TanStackFormComponentColorPicker
                field={field}
                label="Secondary background color"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: 'FormComponentColorPicker' not yet ported - implement TanStackFormComponentColorPicker */}
        <div className={classes.fieldWrapper}>
          <form.Field name="bannerTextColor">
            {(field) => (
              <LWTooltip title="Color of the text on the main banner, and for some event types the text in the header (e.g. \"Effective Altruism Forum\"). For many events its ok to leave this as white, it may be useful to set for events where the primary background color is light." placement="left-start" inlineBlock={false}>
              <TanStackFormComponentColorPicker
                field={field}
                label="Banner text color"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: 'FormComponentColorPicker' not yet ported - implement TanStackFormComponentColorPicker */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contrastColor">
            {(field) => (
              <TanStackFormComponentColorPicker
                field={field}
                label="Accent color (optional, used very rarely)"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'TagSelect' not yet ported - implement TanStackTagSelect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="tagId">
            {(field) => (
              <TanStackTagSelect
                field={field}
                label="Choose tag"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="postId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Choose post ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="bannerImageId">
            {(field) => (
              <TanStackImageUpload
                field={field}
                label="Banner image ID"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="eventFormat">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 'BASIC', label: 'BASIC' },
  { value: 'POLL', label: 'POLL' },
  { value: 'STICKERS', label: 'STICKERS' }
]}
                label="Event format"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="pollQuestion">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: false
}}
                hintText="Write the poll question as plain text (no headings), footnotes will appear as tooltips on the frontpage"
                fieldName="pollQuestion"
                collectionName="ForumEvents"
                commentEditor={true}
                commentStyles={true}
                hideControls={true}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="customComponent">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Custom component"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="commentPrompt">
            {(field) => (
              <LWTooltip title="For events with comments, the title in the comment box (defaults to \"Add your comment\")" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Comment prompt"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

      <Components.FormGroupLayout label="\"POLL\" Event Options" collapsed={true}>
        <div className={classes.fieldWrapper}>
          <form.Field name="pollAgreeWording">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Poll agree wording"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="pollDisagreeWording">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Poll disagree wording"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="\"STICKER\" Event Options" collapsed={true}>
        <div className={classes.fieldWrapper}>
          <form.Field name="maxStickersPerUser">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Max stickers per user"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>

      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    JargonTerms
    ================================================================
*/
export const TanStackJargonTermsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: JargonTermsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: JargonTermsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, JargonTermsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'JargonTerms',
    fragmentName: 'JargonTermsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'JargonTerms',
    fragmentName: 'JargonTermsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: JargonTermsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createJargonTerm.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateJargonTerm.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('JargonTerms'),
  revisionsHaveCommitMessages: false
}}
                hintText="If you want to add a custom term, use this form.  The description goes here.  The term, as well as any alt terms, must appear in your post."
                fieldName="contents"
                collectionName="JargonTerms"
                commentEditor={true}
                commentStyles={true}
                hideControls={true}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="term">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Term"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="altTerms">
            {(field) => (
              <LWTooltip title="Comma-separated, no spaces" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Alternative Terms"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Conversations
    ================================================================
*/
export const TanStackConversationsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: ConversationsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: ConversationsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  

  const { create } = useCreate({
    collectionName: 'Conversations',
    fragmentName: 'ConversationsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Conversations',
    fragmentName: 'ConversationsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      let result: ConversationsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createConversation.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateConversation.data;
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="title">
            {(field) => (
              <TanStackMuiTextField
                field={field}
<<<<<<< VERSION 1
                label="Conversation Title"
=======
                label="Conversation title (visible to all)"
>>>>>>> END
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="participantIds">
            {(field) => (
              <TanStackUserMultiselect
                field={field}
                label="Participants"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for af */}
        <div className={classes.fieldWrapper}>
          <form.Field name="af">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Af"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="moderator">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Moderator"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Messages
    ================================================================
*/
export const TanStackMessagesForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: MessagesInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: MessagesInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, MessagesInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Messages',
    fragmentName: 'MessagesInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Messages',
    fragmentName: 'MessagesInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: MessagesInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createMessage.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateMessage.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Messages'),
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="Messages"
                commentEditor={true}
                commentStyles={true}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noEmail">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="No email"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    ModerationTemplates
    ================================================================
*/
export const TanStackModerationTemplatesForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: ModerationTemplatesInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: ModerationTemplatesInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, ModerationTemplatesInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'ModerationTemplates',
    fragmentName: 'ModerationTemplatesInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'ModerationTemplates',
    fragmentName: 'ModerationTemplatesInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: ModerationTemplatesInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createModerationTemplate.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateModerationTemplate.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="name">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Name"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('ModerationTemplates'),
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="ModerationTemplates"
                commentEditor={true}
                commentStyles={true}
                hideControls={true}
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="collectionName">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { label: 'Messages', value: 'Messages' },
  { label: 'Comments', value: 'Comments' },
  { label: 'Rejections', value: 'Rejections' }
]}
                label="Collection name"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="order">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Order"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="deleted">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Deleted"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Users
    ================================================================
*/
export const TanStackUsersForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: UsersInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: UsersInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, UsersInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Users',
    fragmentName: 'UsersInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Users',
    fragmentName: 'UsersInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: UsersInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createUser.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateUser.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: implement conditional visibility for displayName */}
        <div className={classes.fieldWrapper}>
          <form.Field name="displayName">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Display name"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="previousDisplayName">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Previous display name"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'text' not yet ported - implement TanStacktext */}
        <div className={classes.fieldWrapper}>
          <form.Field name="email">
            {(field) => (
              <TanStacktext
                field={field}
                disabled={/* TODO: replace with function value */}
                label="Email"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for fullName */}
        <div className={classes.fieldWrapper}>
          <form.Field name="fullName">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Full name"
              />
            )}
          </form.Field>
        </div>

<<<<<<< VERSION 1
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for biography */}
        <div className={classes.fieldWrapper}>
          <form.Field name="biography">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Users'),
  revisionsHaveCommitMessages: false
}}
                hintText="Tell us about yourself"
                fieldName="biography"
                collectionName="Users"
                commentEditor={true}
                commentStyles={true}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

=======
>>>>>>> END
        <div className={classes.fieldWrapper}>
          <form.Field name="afKarma">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Alignment Base Score"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="voteCount">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Small Upvote Count"
              />
            )}
          </form.Field>
        </div>

<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Site Customizations" collapsed={true}>
=======
      <Components.FormGroupLayout label="Site customizations" collapsed={true}>
>>>>>>> END
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for theme */}
        {/* TODO: 'ThemeSelect' not yet ported - implement TanStackThemeSelect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="theme">
            {(field) => (
              <TanStackThemeSelect
                field={field}
                label="Theme"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="commentSorting">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
<<<<<<< VERSION 1
  { value: 'postCommentsMagic', label: 'magic (new & upvoted)' },
  { value: 'postCommentsTop', label: 'top scoring' },
  { value: 'postCommentsNew', label: 'newest' },
  { value: 'postCommentsOld', label: 'oldest' },
  { value: 'postCommentsRecentReplies', label: 'latest reply' }
=======
  { value: 'postCommentsMagic', label: 'New & upvoted' },
  { value: 'postCommentsTop', label: 'Top' },
  { value: 'postCommentsNew', label: 'New' },
  { value: 'postCommentsOld', label: 'Old' },
  { value: 'postCommentsRecentReplies', label: 'Latest reply' }
>>>>>>> END
]}
                label="Comment sorting"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="sortDraftsBy">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 'wordCount', label: 'Wordcount' },
  { value: 'modifiedAt', label: 'Last Modified' }
]}
                label="Sort Drafts by"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideFrontpageMap */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideFrontpageMap">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide the frontpage map"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideFrontpageBook2020Ad */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideFrontpageBook2020Ad">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide the frontpage book ad"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noKibitz">
            {(field) => (
              <LWTooltip title="For if you want to not be biased. Adds an option to the user menu to temporarily disable. Does not work well on mobile" placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Hide author names until I hover over them"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for showHideKarmaOption */}
        <div className={classes.fieldWrapper}>
          <form.Field name="showHideKarmaOption">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Enable option on posts to hide karma visibility"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="beta">
            {(field) => (
              <LWTooltip title="Get early access to new in-development features" placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Opt into experimental (beta) features"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hideIntercom">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide Intercom"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="markDownPostEditor">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Activate Markdown Editor"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for reenableDraftJs */}
        <div className={classes.fieldWrapper}>
          <form.Field name="reenableDraftJs">
            {(field) => (
              <LWTooltip title="Restore the old Draft-JS based editor" placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Restore the previous WYSIWYG editor"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hideElicitPredictions">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide other users' Elicit predictions until I have predicted myself"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideAFNonMemberInitialWarning */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideAFNonMemberInitialWarning">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide explanations of how AIAF submissions work for non-members"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noSingleLineComments">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Do not collapse comments to Single Line"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noCollapseCommentsPosts">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Do not truncate comments (in large threads on Post Pages)"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noCollapseCommentsFrontpage">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Do not truncate comments (on home page)"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideCommunitySection */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideCommunitySection">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide community section from the frontpage"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for showCommunityInRecentDiscussion */}
        <div className={classes.fieldWrapper}>
          <form.Field name="showCommunityInRecentDiscussion">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Show Community posts in Recent Discussion"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hidePostsRecommendations */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hidePostsRecommendations">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide recommendations from the posts page"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for optedOutOfSurveys */}
        <div className={classes.fieldWrapper}>
          <form.Field name="optedOutOfSurveys">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Opt out of user surveys"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for postGlossariesPinned */}
        <div className={classes.fieldWrapper}>
          <form.Field name="postGlossariesPinned">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Pin glossaries on posts, and highlight all instances of each term"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for googleLocation */}
        <div className={classes.fieldWrapper}>
          <form.Field name="googleLocation">
            {(field) => (
              <TanStackLocation
                field={field}
                stringVersionFieldName="location"
                label="Account location (used for location-based recommendations)"
              />
            )}
          </form.Field>
        </div>

<<<<<<< VERSION 1
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for mapLocation */}
        <div className={classes.fieldWrapper}>
          <form.Field name="mapLocation">
            {(field) => (
              <TanStackLocation
                field={field}
                variant="grey"
                label="Public map location"
              />
            )}
          </form.Field>
        </div>

=======
>>>>>>> END
        {/* TODO: implement conditional visibility for reactPaletteStyle */}
        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="reactPaletteStyle">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 'listView', label: 'List View' },
  { value: 'iconView', label: 'Icons' }
]}
                label="React Palette Style"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideDialogueFacilitation */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideDialogueFacilitation">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide the widget for opting in to being approached about dialogues"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for revealChecksToAdmins */}
        <div className={classes.fieldWrapper}>
          <form.Field name="revealChecksToAdmins">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Allow users to reveal their checks for better facilitation"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for optedInToDialogueFacilitation */}
        <div className={classes.fieldWrapper}>
          <form.Field name="optedInToDialogueFacilitation">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Opted-in to receiving invitations for dialogue facilitation from LessWrong team"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for showDialoguesList */}
        <div className={classes.fieldWrapper}>
          <form.Field name="showDialoguesList">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Show a list of recently active dialogues inside the frontpage widget"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for showMyDialogues */}
        <div className={classes.fieldWrapper}>
          <form.Field name="showMyDialogues">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Show a list of dialogues the user participated in inside the frontpage widget"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for showMatches */}
        <div className={classes.fieldWrapper}>
          <form.Field name="showMatches">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Show a list of dialogue reciprocity matched users inside frontpage widget"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for showRecommendedPartners */}
        <div className={classes.fieldWrapper}>
          <form.Field name="showRecommendedPartners">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Show a list of recommended dialogue partners inside frontpage widget"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideActiveDialogueUsers */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideActiveDialogueUsers">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hides/collapses the active dialogue users in the header"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideWalledGardenUI */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideWalledGardenUI">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide walled garden ui"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Notifications" collapsed={true}>
        <div className={classes.fieldWrapper}>
          <form.Field name="auto_subscribe_to_my_posts">
            {(field) => (
              <TanStackCheckbox
                field={field}
                beforeComponent="ManageSubscriptionsLink"
                label="Auto-subscribe to comments on my posts"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="auto_subscribe_to_my_comments">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Auto-subscribe to replies to my comments"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for autoSubscribeAsOrganizer */}
        <div className={classes.fieldWrapper}>
          <form.Field name="autoSubscribeAsOrganizer">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Auto-subscribe to posts/events in groups I organize"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationCommentsOnSubscribedPost">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Comments on posts/events I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationShortformContent">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
<<<<<<< VERSION 1
                label="Shortform by users I'm subscribed to"
=======
                label="Quick takes by users I'm subscribed to"
>>>>>>> END
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationRepliesToMyComments">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Replies to my comments"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationRepliesToSubscribedComments">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Replies to comments I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationSubscribedUserPost">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Posts by users I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationSubscribedUserComment">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Comments by users I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationPostsInGroups */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationPostsInGroups">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Posts/events in groups I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationSubscribedTagPost">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Posts added to tags I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationSubscribedSequencePost */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationSubscribedSequencePost">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Posts added to sequences I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationPrivateMessage">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Private messages"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationSharedWithMe">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Draft shared with me"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationAlignmentSubmissionApproved */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationAlignmentSubmissionApproved">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Alignment Forum submission approvals"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationEventInRadius */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationEventInRadius">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="New events in my notification radius"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationRSVPs */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationRSVPs">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="New RSVP responses to my events"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationGroupAdministration */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationGroupAdministration">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Group administration notifications"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationCommentsOnDraft">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Comments on unpublished draft posts I've shared"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationSubforumUnread">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="New discussions in topics I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationNewMention">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Someone has mentioned me in a post or a comment"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationDialogueMessages">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="New dialogue content in a dialogue I'm participating in"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationPublishedDialogueMessages">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="New dialogue content in a dialogue I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationAddedAsCoauthor">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Someone has added me as a coauthor to a post"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationDebateCommentsOnSubscribedPost */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationDebateCommentsOnSubscribedPost">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="[Old Style] New dialogue content in a dialogue I'm subscribed to"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationDebateReplies */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationDebateReplies">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="[Old Style] New dialogue content in a dialogue I'm participating in"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationDialogueMatch */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationDialogueMatch">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Another user and I have matched for a dialogue"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationNewDialogueChecks */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationNewDialogueChecks">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="You have new people interested in dialogue-ing with you"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for notificationYourTurnMatchForm */}
        {/* TODO: 'NotificationTypeSettingsWidget' not yet ported - implement TanStackNotificationTypeSettingsWidget */}
        <div className={classes.fieldWrapper}>
          <form.Field name="notificationYourTurnMatchForm">
            {(field) => (
              <TanStackNotificationTypeSettingsWidget
                field={field}
                label="Fill in the topics form for your dialogue match"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'KarmaChangeNotifierSettings' not yet ported - implement TanStackKarmaChangeNotifierSettings */}
        <div className={classes.fieldWrapper}>
          <form.Field name="karmaChangeNotifierSettings">
            {(field) => (
              <TanStackKarmaChangeNotifierSettings
                field={field}
                label="Karma change notifier settings"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Emails" collapsed={true}>
        {/* TODO: 'UsersEmailVerification' not yet ported - implement TanStackUsersEmailVerification */}
        <div className={classes.fieldWrapper}>
          <form.Field name="whenConfirmationEmailSent">
            {(field) => (
              <TanStackUsersEmailVerification
                field={field}
                label="When confirmation email sent"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for emailSubscribedToCurated */}
        {/* TODO: 'EmailConfirmationRequiredCheckbox' not yet ported - implement TanStackEmailConfirmationRequiredCheckbox */}
        <div className={classes.fieldWrapper}>
          <form.Field name="emailSubscribedToCurated">
            {(field) => (
              <TanStackEmailConfirmationRequiredCheckbox
                field={field}
                label="Email me new posts in Curated"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for subscribedToDigest */}
        <div className={classes.fieldWrapper}>
          <form.Field name="subscribedToDigest">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Subscribe to the EA Forum Digest emails"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="unsubscribeFromAll">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Do not send me any emails (unsubscribe from all)"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Privacy Settings" collapsed={true}>
=======
      <Components.FormGroupLayout label="Privacy settings" collapsed={true}>
>>>>>>> END
        {/* TODO: implement conditional visibility for hideFromPeopleDirectory */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideFromPeopleDirectory">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide my profile from the People directory"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for allowDatadogSessionReplay */}
        <div className={classes.fieldWrapper}>
          <form.Field name="allowDatadogSessionReplay">
            {(field) => (
              <LWTooltip title="Allow us to capture a video-like recording of your browser session (using Datadog Session Replay) — this is useful for debugging and improving the site." placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Allow Session Replay"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Admin Options" collapsed={true}>
=======
      <Components.FormGroupLayout label="Admin options" collapsed={true}>
>>>>>>> END
        <div className={classes.fieldWrapper}>
          <form.Field name="viewUnreviewedComments">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="View unreviewed comments"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for twitterProfileURLAdmin */}
        {/* TODO: 'PrefixedInput' not yet ported - implement TanStackPrefixedInput */}
        <div className={classes.fieldWrapper}>
          <form.Field name="twitterProfileURLAdmin">
            {(field) => (
              <TanStackPrefixedInput
                field={field}
                inputPrefix="twitter.com/"
                heading="Social media (private, for admin use)"
                smallBottomMargin={false}
                label="Twitter profile urladmin"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="slug">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Slug"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noindex">
            {(field) => (
              <LWTooltip title="Hide this user's profile from search engines" placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="No Index"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="sunshineNotes">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Sunshine notes"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="sunshineFlagged">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Sunshine flagged"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="needsReview">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Needs review"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="sunshineSnoozed">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Sunshine snoozed"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="snoozedUntilContentCount">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Snoozed until content count"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="reviewedByUserId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Reviewed by user ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="reviewedAt">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="date"
                InputLabelProps={{ shrink: true }}
                label="Reviewed at"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="shortformFeedId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Quick takes feed ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="defaultToCKEditor">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Activate CKEditor by default"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="signUpReCaptchaRating">
            {(field) => (
              <LWTooltip title="Edit this number to '1' if you're confiden they're not a spammer" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Sign up re captcha rating"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="abTestKey">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Ab test key"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for walledGardenInvite */}
        <div className={classes.fieldWrapper}>
          <form.Field name="walledGardenInvite">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Walled garden invite"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for reviewForAlignmentForumUserId */}
        <div className={classes.fieldWrapper}>
          <form.Field name="reviewForAlignmentForumUserId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="AF Review UserId"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideSunshineSidebar */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideSunshineSidebar">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide Sunshine Sidebar"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Prize/Payment Info" collapsed={false}>
=======
      <Components.FormGroupLayout label="Prize/payment info" collapsed={false}>
>>>>>>> END
        {/* TODO: implement conditional visibility for paymentEmail */}
        <div className={classes.fieldWrapper}>
          <form.Field name="paymentEmail">
            {(field) => (
              <LWTooltip title="An email you'll definitely check where you can receive information about receiving payments" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Payment Contact Email"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for paymentInfo */}
        <div className={classes.fieldWrapper}>
          <form.Field name="paymentInfo">
            {(field) => (
              <LWTooltip title="Your PayPal account info, for sending small payments" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="PayPal Info"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Disabled Privileges" collapsed={true}>
=======
      <Components.FormGroupLayout label="Disabled privileges" collapsed={true}>
>>>>>>> END
        <div className={classes.fieldWrapper}>
          <form.Field name="postingDisabled">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Posting disabled"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="allCommentingDisabled">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="All commenting disabled"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="commentingOnOtherUsersDisabled">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Commenting on other users disabled"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="conversationsDisabled">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Conversations disabled"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Ban & Purge User" collapsed={true}>
=======
      <Components.FormGroupLayout label="Ban & purge user" collapsed={true}>
>>>>>>> END
        <div className={classes.fieldWrapper}>
          <form.Field name="nullifyVotes">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Nullify all past votes"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="deleteContent">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Delete all user content"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="banned">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Ban user until"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="IPs">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Ips"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Moderation & Moderation Guidelines" collapsed={true}>
=======
      <Components.FormGroupLayout label="Moderation" collapsed={true}>
>>>>>>> END
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for moderationGuidelines */}
        <div className={classes.fieldWrapper}>
          <form.Field name="moderationGuidelines">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Users'),
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="moderationGuidelines"
                collectionName="Users"
                commentEditor={true}
                commentStyles={true}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for moderationStyle */}
        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="moderationStyle">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: '', label: 'No Moderation' },
  {
    value: 'easy-going',
    label: 'Easy Going - I just delete obvious spam and trolling.'
  },
  {
    value: 'norm-enforcing',
    label: 'Norm Enforcing - I try to enforce particular rules (see below)'
  },
  {
    value: 'reign-of-terror',
    label: 'Reign of Terror - I delete anything I judge to be annoying or counterproductive'
  }
]}
                label="Style"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for moderatorAssistance */}
        <div className={classes.fieldWrapper}>
          <form.Field name="moderatorAssistance">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="I'm happy for site moderators to help enforce my policy"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for collapseModerationGuidelines */}
        <div className={classes.fieldWrapper}>
          <form.Field name="collapseModerationGuidelines">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="On my posts, collapse my moderation guidelines by default"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="bannedUserIds">
            {(field) => (
              <TanStackUserMultiselect
                field={field}
                label="Banned Users (All)"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="bannedPersonalUserIds">
            {(field) => (
              <LWTooltip title="Users who are banned from commenting on your personal blogposts (will not affect posts promoted to frontpage)" placement="left-start" inlineBlock={false}>
              <TanStackUserMultiselect
                field={field}
                label="Banned Users (Personal)"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
=======
      <Components.FormGroupLayout label="General info">
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for mapLocation */}
        <div className={classes.fieldWrapper}>
          <form.Field name="mapLocation">
            {(field) => (
              <TanStackLocation
                field={field}
                variant="grey"
                label="Location"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="About you">
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for biography */}
        <div className={classes.fieldWrapper}>
          <form.Field name="biography">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Users'),
  revisionsHaveCommitMessages: false
}}
                hintText="Tell us about yourself"
                fieldName="biography"
                collectionName="Users"
                commentEditor={true}
                commentStyles={true}
                hideControls={false}
                formVariant="grey"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
>>>>>>> END
      <Components.FormGroupLayout label="Admin">
        <div className={classes.fieldWrapper}>
          <form.Field name="isAdmin">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Admin"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'checkboxgroup' not yet ported - implement TanStackcheckboxgroup */}
        <div className={classes.fieldWrapper}>
          <form.Field name="groups">
            {(field) => (
              <TanStackcheckboxgroup
                field={field}
                options={[
  { value: 'sunshineRegiment', label: 'sunshineRegiment' },
  { value: 'podcasters', label: 'podcasters' },
  { value: 'trustLevel1', label: 'trustLevel1' },
  { value: 'canBypassPostRateLimit', label: 'canBypassPostRateLimit' },
  { value: 'canModeratePersonal', label: 'canModeratePersonal' },
  { value: 'canCommentLock', label: 'canCommentLock' },
  { value: 'tagManager', label: 'tagManager' },
  { value: 'canSuggestCuration', label: 'canSuggestCuration' },
  { value: 'debaters', label: 'debaters' },
  { value: 'realAdmins', label: 'realAdmins' },
  { value: 'alignmentVoters', label: 'alignmentVoters' },
  { value: 'alignmentForum', label: 'alignmentForum' },
  { value: 'alignmentForumAdmins', label: 'alignmentForumAdmins' }
]}
                label="Groups"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Deactivate Account" collapsed={true}>
=======
      <Components.FormGroupLayout label="Deactivate account" collapsed={true}>
>>>>>>> END
        {/* TODO: implement conditional visibility for deleted */}
        <div className={classes.fieldWrapper}>
          <form.Field name="deleted">
            {(field) => (
              <LWTooltip title="Your posts and comments will be listed as '[Anonymous]', and your user profile won't accessible." placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Deactivate"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>

      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
            variant={isBookUI ? 'outlined' : undefined}
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Posts
    ================================================================
*/
export const TanStackPostsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: PostsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: PostsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, PostsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Posts',
    fragmentName: 'PostsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Posts',
    fragmentName: 'PostsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: PostsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createPost.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updatePost.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="afCommentCount">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Alignment Comment Count"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="afBaseScore">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Alignment Base Score"
              />
            )}
          </form.Field>
        </div>

      <Components.FormGroupPostTopBar >
        {/* TODO: implement conditional visibility for postCategory */}
        {/* TODO: 'EditPostCategory' not yet ported - implement TanStackEditPostCategory */}
        <div className={classes.fieldWrapper}>
          <form.Field name="postCategory">
            {(field) => (
              <TanStackEditPostCategory
                field={field}
                label="Post category"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for sharingSettings */}
        {/* TODO: 'PostSharingSettings' not yet ported - implement TanStackPostSharingSettings */}
        <div className={classes.fieldWrapper}>
          <form.Field name="sharingSettings">
            {(field) => (
              <TanStackPostSharingSettings
                field={field}
                label="Sharing Settings"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupPostTopBar>
      <Components.FormGroupLayout /* TODO: port layoutComponentProps: {"groupStyling":false,"paddingStyling":true,"flexAlignTopStyling":true} */>
        {/* TODO: 'EditTitle' not yet ported - implement TanStackEditTitle */}
        <div className={classes.fieldWrapper}>
          <form.Field name="title">
            {(field) => (
              <TanStackEditTitle
                field={field}
                placeholder="Title"
                label="Title"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout /* TODO: port layoutComponentProps: {"groupStyling":false,"paddingStyling":true,"flexStyling":true} */>
        {/* TODO: implement conditional visibility for url */}
        {/* TODO: 'EditLinkpostUrl' not yet ported - implement TanStackEditLinkpostUrl */}
        <div className={classes.fieldWrapper}>
          <form.Field name="url">
            {(field) => (
              <TanStackEditLinkpostUrl
                field={field}
<<<<<<< VERSION 1
                hintText="Please write what you liked about the post and sample liberally! If the author allows it, copy in the entire post text. (Link-posts without text get far fewer views and most people don't click offsite links.)"
=======
                hintText="UrlHintText"
>>>>>>> END
                labels={{ inactive: 'Link-post?', active: 'Add a linkpost URL' }}
                label="Url"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout /* TODO: port layoutComponentProps: {"groupStyling":false,"paddingStyling":true} */>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Posts'),
  hasToc: true,
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="Posts"
                commentEditor={false}
                commentStyles={false}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Event Details">
        {/* TODO: implement conditional visibility for onlineEvent */}
        <div className={classes.fieldWrapper}>
          <form.Field name="onlineEvent">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Online event"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for groupId */}
        {/* TODO: 'SelectLocalgroup' not yet ported - implement TanStackSelectLocalgroup */}
        <div className={classes.fieldWrapper}>
          <form.Field name="groupId">
            {(field) => (
              <TanStackSelectLocalgroup
                field={field}
                label="Group"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for eventType */}
        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="eventType">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 'presentation', label: 'Presentation' },
  { value: 'discussion', label: 'Discussion' },
  { value: 'workshop', label: 'Workshop' },
  { value: 'social', label: 'Social' },
  { value: 'coworking', label: 'Coworking' },
  { value: 'course', label: 'Course' },
  { value: 'conference', label: 'Conference' }
]}
                label="Event Format"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for activateRSVPs */}
        <div className={classes.fieldWrapper}>
          <form.Field name="activateRSVPs">
            {(field) => (
              <LWTooltip title="RSVPs are public, but the associated email addresses are only visible to organizers." placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Enable RSVPs for this event"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for startTime */}
        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="startTime">
            {(field) => (
              <LWTooltip title="For courses/programs, this is the application deadline." placement="left-start" inlineBlock={false}>
              <TanStackdatetime
                field={field}
                label="Start Time"
=======
      <Components.FormGroupLayout label="Set wikitags" collapsed={false}>
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for tagRelevance */}
        {/* TODO: 'FormComponentPostEditorTagging' not yet ported - implement TanStackFormComponentPostEditorTagging */}
        <div className={classes.fieldWrapper}>
          <form.Field name="tagRelevance">
            {(field) => (
              <TanStackFormComponentPostEditorTagging
                field={field}
                label="Tag relevance"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Event details">
        {/* TODO: implement conditional visibility for onlineEvent */}
        <div className={classes.fieldWrapper}>
          <form.Field name="onlineEvent">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Online event"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for groupId */}
        {/* TODO: 'SelectLocalgroup' not yet ported - implement TanStackSelectLocalgroup */}
        <div className={classes.fieldWrapper}>
          <form.Field name="groupId">
            {(field) => (
              <TanStackSelectLocalgroup
                field={field}
                label="Group"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for eventType */}
        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="eventType">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 'presentation', label: 'Presentation' },
  { value: 'discussion', label: 'Discussion' },
  { value: 'workshop', label: 'Workshop' },
  { value: 'social', label: 'Social' },
  { value: 'coworking', label: 'Coworking' },
  { value: 'course', label: 'Course' },
  { value: 'conference', label: 'Conference' }
]}
                label="Event Format"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for activateRSVPs */}
        <div className={classes.fieldWrapper}>
          <form.Field name="activateRSVPs">
            {(field) => (
              <LWTooltip title="RSVPs are public, but the associated email addresses are only visible to organizers." placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Enable RSVPs for this event"
>>>>>>> END
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

<<<<<<< VERSION 1
        {/* TODO: implement conditional visibility for endTime */}
=======
        {/* TODO: implement conditional visibility for startTime */}
>>>>>>> END
        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
<<<<<<< VERSION 1
=======
          <form.Field name="startTime">
            {(field) => (
              <LWTooltip title="For courses/programs, this is the application deadline." placement="left-start" inlineBlock={false}>
              <TanStackdatetime
                field={field}
                label="Start Time"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for endTime */}
        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
>>>>>>> END
          <form.Field name="endTime">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="End Time"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for eventRegistrationLink */}
        <div className={classes.fieldWrapper}>
          <form.Field name="eventRegistrationLink">
            {(field) => (
              <LWTooltip title="https://..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Event Registration Link"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for joinEventLink */}
        <div className={classes.fieldWrapper}>
          <form.Field name="joinEventLink">
            {(field) => (
              <LWTooltip title="https://..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Join Online Event Link"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for globalEvent */}
        <div className={classes.fieldWrapper}>
          <form.Field name="globalEvent">
            {(field) => (
              <LWTooltip title="By default, events are only advertised to people who are located nearby (for both in-person and online events). Check this to advertise it people located anywhere." placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="This event is intended for a global audience"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for googleLocation */}
        <div className={classes.fieldWrapper}>
          <form.Field name="googleLocation">
            {(field) => (
              <TanStackLocation
                field={field}
                stringVersionFieldName="location"
                label="Event Location"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for contactInfo */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contactInfo">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Contact Info"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for facebookLink */}
        <div className={classes.fieldWrapper}>
          <form.Field name="facebookLink">
            {(field) => (
              <LWTooltip title="https://www.facebook.com/events/..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Facebook Event"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for meetupLink */}
        <div className={classes.fieldWrapper}>
          <form.Field name="meetupLink">
            {(field) => (
              <LWTooltip title="https://www.meetup.com/..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Meetup.com Event"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for website */}
        <div className={classes.fieldWrapper}>
          <form.Field name="website">
            {(field) => (
              <LWTooltip title="https://..." placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Website"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for eventImageId */}
        <div className={classes.fieldWrapper}>
          <form.Field name="eventImageId">
            {(field) => (
              <LWTooltip title="Recommend 1920x1005 px, 1.91:1 aspect ratio (same as Facebook)" placement="left-start" inlineBlock={false}>
              <TanStackImageUpload
                field={field}
                label="Event Image"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for types */}
        <div className={classes.fieldWrapper}>
          <form.Field name="types">
            {(field) => (
              <TanStackMultiSelectButtons
                field={field}
                options={[
  { value: 'LW' },
  { value: 'SSC' },
  { value: 'EA' },
  { value: 'MIRIx' }
]}
                label="Group Type:"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Coauthors" hideHeader>
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'CoauthorsListEditor' not yet ported - implement TanStackCoauthorsListEditor */}
        <div className={classes.fieldWrapper}>
          <form.Field name="coauthorStatuses">
            {(field) => (
              <TanStackCoauthorsListEditor
                field={field}
                label="Co-Authors"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Edit Link Preview" collapsed={true}>
=======
      <Components.FormGroupLayout label="Edit link preview" collapsed={false}>
>>>>>>> END
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for socialPreview */}
        {/* TODO: 'SocialPreviewUpload' not yet ported - implement TanStackSocialPreviewUpload */}
        <div className={classes.fieldWrapper}>
          <form.Field name="socialPreview">
            {(field) => (
              <TanStackSocialPreviewUpload
                field={field}
                label="Social Preview Image"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Highlight" collapsed={true}>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="customHighlight">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Posts'),
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="customHighlight"
                collectionName="Posts"
                commentEditor={false}
                commentStyles={false}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Admin Options" collapsed={true}>
=======
      <Components.FormGroupLayout label="Admin options" collapsed={true}>
>>>>>>> END
        <div className={classes.fieldWrapper}>
          <form.Field name="sticky">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Sticky"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="metaSticky">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Sticky (Meta)"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for afSticky */}
        <div className={classes.fieldWrapper}>
          <form.Field name="afSticky">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Sticky (Alignment)"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="stickyPriority">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 1, label: 'Low' },
  { value: 2, label: 'Normal' },
  { value: 3, label: 'Elevated' },
  { value: 4, label: 'Max' }
]}
                label="Sticky priority"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="unlisted">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Make only accessible via link"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="legacy">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Legacy"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="disableRecommendation">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Exclude from Recommendations"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="forceAllowType3Audio">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Force allow type3 audio"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="defaultRecommendation">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Include in default recommendations"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideFromPopularComments */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideFromPopularComments">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide comments on this post from Popular Comments"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="slug">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Slug"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="postedAt">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Posted at"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="status">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 1, label: 'pending' },
  { value: 2, label: 'approved' },
  { value: 3, label: 'rejected' },
  { value: 4, label: 'spam' },
  { value: 5, label: 'deleted' }
]}
                label="Status"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'text' not yet ported - implement TanStacktext */}
        <div className={classes.fieldWrapper}>
          <form.Field name="userId">
            {(field) => (
              <LWTooltip title="The user id of the author" placement="left-start" inlineBlock={false}>
              <TanStacktext
                field={field}
                label="User ID"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="authorIsUnreviewed">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Author is unreviewed"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'FormComponentNumber' not yet ported - implement TanStackFormComponentNumber */}
        <div className={classes.fieldWrapper}>
          <form.Field name="readTimeMinutesOverride">
            {(field) => (
              <LWTooltip title="By default, this is calculated from the word count. Enter a value to override." placement="left-start" inlineBlock={false}>
              <TanStackFormComponentNumber
                field={field}
                label="Read time (minutes)"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="canonicalSource">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Canonical source"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for manifoldReviewMarketId */}
        <div className={classes.fieldWrapper}>
          <form.Field name="manifoldReviewMarketId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Manifold review market ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noIndex">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="No index"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="onlyVisibleToLoggedIn">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide this post from users who are not logged in"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="onlyVisibleToEstablishedAccounts">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide this post from logged out users and newly created accounts"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hideFromRecentDiscussions">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide this post from recent discussions"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="votingSystem">
            {(field) => (
              <TanStackselect
                field={field}
                options={/* TODO: replace with function value */}
                label="Voting system"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="feedId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Feed ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="feedLink">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Feed link"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="curatedDate">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Curated date"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="metaDate">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Meta date"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="suggestForCuratedUserIds">
            {(field) => (
              <TanStackUserMultiselect
                field={field}
                label="Suggested for Curated by"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="reviewForCuratedUserId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Curated Review UserId"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="commentSortOrder">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Comment sort order"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hideAuthor">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide author"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for reviewForAlignmentUserId */}
        <div className={classes.fieldWrapper}>
          <form.Field name="reviewForAlignmentUserId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="AF Review UserId"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="swrCachingEnabled">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="stale-while-revalidate caching enabled"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Canonical Sequence" collapsed={true}>
=======
      <Components.FormGroupLayout label="Canonical sequence" collapsed={true}>
>>>>>>> END
        <div className={classes.fieldWrapper}>
          <form.Field name="collectionTitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Collection title"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'text' not yet ported - implement TanStacktext */}
        <div className={classes.fieldWrapper}>
          <form.Field name="canonicalSequenceId">
            {(field) => (
              <TanStacktext
                field={field}
                label="Canonical sequence ID"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'text' not yet ported - implement TanStacktext */}
        <div className={classes.fieldWrapper}>
          <form.Field name="canonicalCollectionSlug">
            {(field) => (
              <TanStacktext
                field={field}
                label="Canonical collection slug"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'text' not yet ported - implement TanStacktext */}
        <div className={classes.fieldWrapper}>
          <form.Field name="canonicalBookId">
            {(field) => (
              <TanStacktext
                field={field}
                label="Canonical book ID"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'text' not yet ported - implement TanStacktext */}
        <div className={classes.fieldWrapper}>
          <form.Field name="canonicalNextPostSlug">
            {(field) => (
              <TanStacktext
                field={field}
                label="Canonical next post slug"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'text' not yet ported - implement TanStacktext */}
        <div className={classes.fieldWrapper}>
          <form.Field name="canonicalPrevPostSlug">
            {(field) => (
              <TanStacktext
                field={field}
                label="Canonical prev post slug"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Options" collapsed={true}>
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for fmCrosspost */}
        {/* TODO: 'FMCrosspostControl' not yet ported - implement TanStackFMCrosspostControl */}
        <div className={classes.fieldWrapper}>
          <form.Field name="fmCrosspost">
            {(field) => (
              <TanStackFMCrosspostControl
                field={field}
                label="Fm crosspost"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="af">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Alignment Forum"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for disableSidenotes */}
        <div className={classes.fieldWrapper}>
          <form.Field name="disableSidenotes">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Disable sidenotes"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Audio" collapsed={true}>
        {/* TODO: 'PodcastEpisodeInput' not yet ported - implement TanStackPodcastEpisodeInput */}
        <div className={classes.fieldWrapper}>
          <form.Field name="podcastEpisodeId">
            {(field) => (
              <TanStackPodcastEpisodeInput
                field={field}
                label="Podcast episode ID"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Moderation Guidelines" collapsed={true}>
=======
      <Components.FormGroupLayout label="Moderation" collapsed={true}>
>>>>>>> END
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for moderationGuidelines */}
        <div className={classes.fieldWrapper}>
          <form.Field name="moderationGuidelines">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Posts'),
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="moderationGuidelines"
                collectionName="Posts"
                commentEditor={true}
                commentStyles={true}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for moderationStyle */}
        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="moderationStyle">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: '', label: 'No Moderation' },
  {
    value: 'easy-going',
    label: 'Easy Going - I just delete obvious spam and trolling.'
  },
  {
    value: 'norm-enforcing',
    label: 'Norm Enforcing - I try to enforce particular rules (see below)'
  },
  {
    value: 'reign-of-terror',
    label: 'Reign of Terror - I delete anything I judge to be annoying or counterproductive'
  }
]}
                label="Style"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for ignoreRateLimits */}
        <div className={classes.fieldWrapper}>
          <form.Field name="ignoreRateLimits">
            {(field) => (
              <LWTooltip title="Allow rate-limited users to comment freely on this post" placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Ignore rate limits"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hideFrontpageComments">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide frontpage comments"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="commentsLocked">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Comments locked"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="commentsLockedToAccountsCreatedAfter">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Comments locked to accounts created after"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for hideCommentKarma */}
        <div className={classes.fieldWrapper}>
          <form.Field name="hideCommentKarma">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide comment karma"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Glossary" collapsed={false} hideHeader>
        {/* TODO: implement conditional visibility for glossary */}
        {/* TODO: 'GlossaryEditFormWrapper' not yet ported - implement TanStackGlossaryEditFormWrapper */}
        <div className={classes.fieldWrapper}>
          <form.Field name="glossary">
            {(field) => (
              <TanStackGlossaryEditFormWrapper
                field={field}
                label="Glossary"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Apply Wikitags" collapsed={false}>
        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: implement conditional visibility for tagRelevance */}
        {/* TODO: 'FormComponentPostEditorTagging' not yet ported - implement TanStackFormComponentPostEditorTagging */}
        <div className={classes.fieldWrapper}>
          <form.Field name="tagRelevance">
            {(field) => (
              <TanStackFormComponentPostEditorTagging
                field={field}
                label="Tag relevance"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
=======
>>>>>>> END

      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
            onClick={() => form.setFieldValue('draft', false)}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    RSSFeeds
    ================================================================
*/
export const TanStackRSSFeedsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: RSSFeedsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: RSSFeedsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  

  const { create } = useCreate({
    collectionName: 'RSSFeeds',
    fragmentName: 'RSSFeedsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'RSSFeeds',
    fragmentName: 'RSSFeedsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      let result: RSSFeedsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createRSSFeed.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateRSSFeed.data;
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="nickname">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Nickname"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="url">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Url"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="ownedByUser">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Owned by user"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="displayFullContent">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Display full content"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="status">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Status"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="setCanonicalUrl">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Set the canonical url tag on crossposted posts"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="importAsDraft">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Import posts as draft"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    PetrovDayActions
    ================================================================
*/
export const TanStackPetrovDayActionsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: PetrovDayActionsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: PetrovDayActionsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  

  const { create } = useCreate({
    collectionName: 'PetrovDayActions',
    fragmentName: 'PetrovDayActionsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'PetrovDayActions',
    fragmentName: 'PetrovDayActionsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      let result: PetrovDayActionsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createPetrovDayAction.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updatePetrovDayAction.data;
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="actionType">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                options={[
  { label: 'optIn', value: 'optIn' },
  { label: 'hasRole', value: 'hasRole' },
  { label: 'hasSide', value: 'hasSide' },
  { label: 'nukeTheWest', value: 'nukeTheWest' },
  { label: 'nukeTheEast', value: 'nukeTheEast' },
  { label: 'eastPetrovAllClear', value: 'eastPetrovAllClear' },
  {
    label: 'eastPetrovNukesIncoming',
    value: 'eastPetrovNukesIncoming'
  },
  { label: 'westPetrovAllClear', value: 'westPetrovAllClear' },
  {
    label: 'westPetrovNukesIncoming',
    value: 'westPetrovNukesIncoming'
  }
]}
                label="Action type"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Books
    ================================================================
*/
export const TanStackBooksForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: BooksInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: BooksInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, BooksInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Books',
    fragmentName: 'BooksInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Books',
    fragmentName: 'BooksInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: BooksInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createBook.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateBook.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="Books"
                commentEditor={false}
                commentStyles={false}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="title">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Title"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="subtitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Subtitle"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="tocTitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Toc title"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="collectionId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Collection ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="number">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Number"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'PostsListEditor' not yet ported - implement TanStackPostsListEditor */}
        <div className={classes.fieldWrapper}>
          <form.Field name="postIds">
            {(field) => (
              <TanStackPostsListEditor
                field={field}
                label="Post ids"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'SequencesListEditor' not yet ported - implement TanStackSequencesListEditor */}
        <div className={classes.fieldWrapper}>
          <form.Field name="sequenceIds">
            {(field) => (
              <TanStackSequencesListEditor
                field={field}
                label="Sequence ids"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="displaySequencesAsGrid">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Display sequences as grid"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hideProgressBar">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide progress bar"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="showChapters">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Show chapters"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Chapters
    ================================================================
*/
export const TanStackChaptersForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: ChaptersInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: ChaptersInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, ChaptersInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Chapters',
    fragmentName: 'ChaptersInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Chapters',
    fragmentName: 'ChaptersInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: ChaptersInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createChapter.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateChapter.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="Chapters"
                commentEditor={false}
                commentStyles={false}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'PostsListEditor' not yet ported - implement TanStackPostsListEditor */}
        <div className={classes.fieldWrapper}>
          <form.Field name="postIds">
            {(field) => (
              <TanStackPostsListEditor
                field={field}
                label="Post ids"
              />
            )}
          </form.Field>
        </div>

      <Components.FormGroupLayout label="Chapter Details" collapsed={true}>
        <div className={classes.fieldWrapper}>
          <form.Field name="title">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                placeholder="Title"
                label="Title"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="subtitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                placeholder="Subtitle"
                label="Subtitle"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="number">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Number"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>

      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Collections
    ================================================================
*/
export const TanStackCollectionsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: CollectionsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: CollectionsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, CollectionsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Collections',
    fragmentName: 'CollectionsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Collections',
    fragmentName: 'CollectionsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: CollectionsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createCollection.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateCollection.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Collections'),
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="Collections"
                commentEditor={false}
                commentStyles={false}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="title">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Title"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="slug">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Slug"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="gridImageId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Grid image ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="firstPageLink">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="First page link"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hideStartReadingButton">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide start reading button"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noindex">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Noindex"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Sequences
    ================================================================
*/
export const TanStackSequencesForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: SequencesInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: SequencesInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, SequencesInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Sequences',
    fragmentName: 'SequencesInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Sequences',
    fragmentName: 'SequencesInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: SequencesInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createSequence.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateSequence.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: 'EditSequenceTitle' not yet ported - implement TanStackEditSequenceTitle */}
        <div className={classes.fieldWrapper}>
          <form.Field name="title">
            {(field) => (
              <TanStackEditSequenceTitle
                field={field}
<<<<<<< VERSION 1
                placeholder="Sequence Title"
=======
                placeholder="Sequence title"
>>>>>>> END
                label="Title"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Sequences'),
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="Sequences"
                commentEditor={false}
                commentStyles={false}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="bannerImageId">
            {(field) => (
              <TanStackImageUpload
                field={field}
                label="Banner Image"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="gridImageId">
            {(field) => (
              <TanStackImageUpload
                field={field}
                label="Card Image"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hideFromAuthorPage">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Hide from my user profile"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="draft">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Draft"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="af">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Alignment Forum"
              />
            )}
          </form.Field>
        </div>

<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Admin Options" collapsed={false}>
=======
      <Components.FormGroupLayout label="Admin options" collapsed={false}>
>>>>>>> END
        {/* TODO: 'FormUserSelect' not yet ported - implement TanStackFormUserSelect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="userId">
            {(field) => (
              <TanStackFormUserSelect
                field={field}
                label="Set author"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="curatedOrder">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Curated order"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="userProfileOrder">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="User profile order"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'text' not yet ported - implement TanStacktext */}
        <div className={classes.fieldWrapper}>
          <form.Field name="canonicalCollectionSlug">
            {(field) => (
              <LWTooltip title="The machine-readable slug for the collection this sequence belongs to. Will affect links, so don't set it unless you have the slug exactly right." placement="left-start" inlineBlock={false}>
              <TanStacktext
                field={field}
<<<<<<< VERSION 1
                label="Collection Slug"
=======
                label="Collection slug"
>>>>>>> END
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="hidden">
            {(field) => (
              <LWTooltip title="Hidden sequences don't show up on lists/search results on this site, but can still be accessed directly by anyone" placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Hidden"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noindex">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Noindex"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
<<<<<<< VERSION 1
      <Components.FormGroupLayout label="Advanced Options" collapsed={true}>
=======
      <Components.FormGroupLayout label="Advanced options" collapsed={true}>
>>>>>>> END
        <div className={classes.fieldWrapper}>
          <form.Field name="isDeleted">
            {(field) => (
              <LWTooltip title="Make sure you want to delete this sequence - it will be completely hidden from the forum." placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Delete"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>

      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Spotlights
    ================================================================
*/
export const TanStackSpotlightsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: SpotlightsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: SpotlightsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, SpotlightsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Spotlights',
    fragmentName: 'SpotlightsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Spotlights',
    fragmentName: 'SpotlightsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: SpotlightsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createSpotlight.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateSpotlight.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="documentId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Document ID"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="documentType">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { label: 'Sequence', value: 'Sequence' },
  { label: 'Post', value: 'Post' },
  { label: 'Tag', value: 'Tag' }
]}
                label="Document type"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="position">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Position"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="duration">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Duration"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="customTitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Custom title"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="customSubtitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Custom subtitle"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="subtitleUrl">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Subtitle url"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="headerTitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Header title"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="headerTitleLeftColor">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Header title left color"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="headerTitleRightColor">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Header title right color"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="lastPromotedAt">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Last promoted at"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="draft">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Draft"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="deletedDraft">
            {(field) => (
              <LWTooltip title="Remove from the spotlights page, but keep in the database." placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="Deleted draft"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="showAuthor">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Show author"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="imageFade">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Image fade"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'FormComponentColorPicker' not yet ported - implement TanStackFormComponentColorPicker */}
        <div className={classes.fieldWrapper}>
          <form.Field name="imageFadeColor">
            {(field) => (
              <TanStackFormComponentColorPicker
                field={field}
                label="Image fade color"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="spotlightSplashImageUrl">
            {(field) => (
              <LWTooltip title="Note: Large images can cause slow loading of the front page. Consider using the Cloudinary uploader instead (which will automatically resize the image)" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Spotlight splash image url"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="spotlightImageId">
            {(field) => (
              <TanStackImageUpload
                field={field}
                label="Spotlight image ID"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="description">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="description"
                collectionName="Spotlights"
                commentEditor={true}
                commentStyles={true}
                hideControls={true}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="spotlightDarkImageId">
            {(field) => (
              <TanStackImageUpload
                field={field}
                label="Spotlight dark image ID"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    ModeratorActions
    ================================================================
*/
export const TanStackModeratorActionsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: ModeratorActionsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: ModeratorActionsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  

  const { create } = useCreate({
    collectionName: 'ModeratorActions',
    fragmentName: 'ModeratorActionsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'ModeratorActions',
    fragmentName: 'ModeratorActionsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      let result: ModeratorActionsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createModeratorAction.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateModeratorAction.data;
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: 'SearchSingleUser' not yet ported - implement TanStackSearchSingleUser */}
        <div className={classes.fieldWrapper}>
          <form.Field name="userId">
            {(field) => (
              <TanStackSearchSingleUser
                field={field}
                label="User ID"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="type">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 'rateLimitOnePerDay', label: 'Rate Limit (1 per day)' },
  {
    value: 'rateLimitOnePerThreeDays',
    label: 'Rate Limit (1 per 3 days)'
  },
  { value: 'rateLimitOnePerWeek', label: 'Rate Limit (1 per week)' },
  {
    value: 'rateLimitOnePerFortnight',
    label: 'Rate Limit (1 per fortnight)'
  },
  { value: 'rateLimitOnePerMonth', label: 'Rate Limit (1 per month)' },
  {
    value: 'rateLimitThreeCommentsPerPost',
    label: 'Rate Limit (3 comments per post per week)'
  },
  {
    value: 'recentlyDownvotedContentAlert',
    label: 'Recently Downvoted Content'
  },
  {
    value: 'lowAverageKarmaCommentAlert',
    label: 'Low Average Karma Comments'
  },
  {
    value: 'lowAverageKarmaPostAlert',
    label: 'Low Average Karma Posts'
  },
  { value: 'negativeUserKarmaAlert', label: 'Negative Karma User' },
  { value: 'movedPostToDraft', label: 'Moved Post to Draft' },
  { value: 'sentModeratorMessage', label: 'Sent Moderator Message' },
  { value: 'manualFlag', label: 'Manually Flagged' },
  {
    value: 'votingPatternWarningDelivered',
    label: 'Received automatic warning for voting too fast'
  },
  {
    value: 'flaggedForNDMs',
    label: 'Auto-flagged for sending suspiciously many DMs'
  },
  {
    value: 'autoBlockedFromSendingDMs',
    label: 'Auto-blocked from sending DMs for trying to send suspiciously many DMs'
  },
  { value: 'rejectedPost', label: 'Rejected Post' },
  { value: 'rejectedComment', label: 'Rejected Comment' },
  {
    value: 'potentialTargetedDownvoting',
    label: 'Suspected targeted downvoting of a specific user'
  },
  { value: 'exemptFromRateLimits', label: 'Exempt from rate limits' },
  {
    value: 'receivedSeniorDownvotesAlert',
    label: 'Received too many downvotes on net-negative comments from senior users; if justified, default to 1 comment per 2 day rate limit for a month'
  }
]}
                label="Type"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="endedAt">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Ended at"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Reports
    ================================================================
*/
export const TanStackReportsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: ReportsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: ReportsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  

  const { create } = useCreate({
    collectionName: 'Reports',
    fragmentName: 'ReportsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Reports',
    fragmentName: 'ReportsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      let result: ReportsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createReport.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateReport.data;
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="description">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                placeholder="What are you reporting this comment for?"
                label="Reason"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="closedAt">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="date"
                InputLabelProps={{ shrink: true }}
                label="Closed at"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="markedAsSpam">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Marked as spam"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    UserRateLimits
    ================================================================
*/
export const TanStackUserRateLimitsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: UserRateLimitsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: UserRateLimitsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  

  const { create } = useCreate({
    collectionName: 'UserRateLimits',
    fragmentName: 'UserRateLimitsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'UserRateLimits',
    fragmentName: 'UserRateLimitsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      let result: UserRateLimitsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createUserRateLimit.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateUserRateLimit.data;
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="type">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 'allComments', label: 'Comments' },
  { value: 'allPosts', label: 'Posts' }
]}
                label="Type"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="intervalUnit">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 'minutes', label: 'minutes' },
  { value: 'hours', label: 'hours' },
  { value: 'days', label: 'days' },
  { value: 'weeks', label: 'weeks' }
]}
                label="Interval unit"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="intervalLength">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Interval length"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="actionsPerInterval">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Actions per interval"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="endedAt">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Ended at"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    SurveySchedules
    ================================================================
*/
export const TanStackSurveySchedulesForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: SurveySchedulesInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: SurveySchedulesInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  

  const { create } = useCreate({
    collectionName: 'SurveySchedules',
    fragmentName: 'SurveySchedulesInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'SurveySchedules',
    fragmentName: 'SurveySchedulesInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      let result: SurveySchedulesInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createSurveySchedule.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateSurveySchedule.data;
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="surveyId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Survey ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="name">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Schedule name"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="impressionsLimit">
            {(field) => (
              <LWTooltip title="The maximum number of visitors who'll see this survey" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Impressions limit"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="maxVisitorPercentage">
            {(field) => (
              <LWTooltip title="The maximum percentage of visitors this survey will be shown to" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Max visitor percentage"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="minKarma">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Min karma"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="maxKarma">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Max karma"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="target">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 'allUsers', label: 'All users' },
  { value: 'loggedInOnly', label: 'Logged-in users only' },
  { value: 'loggedOutOnly', label: 'Logged-out users only' }
]}
                hideClear={true}
                label="Target"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="startDate">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="Start date"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'datetime' not yet ported - implement TanStackdatetime */}
        <div className={classes.fieldWrapper}>
          <form.Field name="endDate">
            {(field) => (
              <TanStackdatetime
                field={field}
                label="End date"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="deactivated">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Deactivated"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    Tags
    ================================================================
*/
export const TanStackTagsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: TagsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: TagsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, TagsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'Tags',
    fragmentName: 'TagsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'Tags',
    fragmentName: 'TagsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: TagsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createTag.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateTag.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="name">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Name"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="description">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: true
}}
                hintText={defaultEditorPlaceholder}
                fieldName="description"
                collectionName="Tags"
                commentEditor={false}
                commentStyles={true}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="afBaseScore">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Alignment Base Score"
              />
            )}
          </form.Field>
        </div>

      <Components.FormGroupLayout label="Advanced Options" collapsed={true}>
        <div className={classes.fieldWrapper}>
          <form.Field name="slug">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Slug"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="shortName">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Short name"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="subtitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Subtitle"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="core">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Core Tag (moderators check whether it applies when reviewing new posts)"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for isPostType */}
        <div className={classes.fieldWrapper}>
          <form.Field name="isPostType">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Is post type"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="suggestedAsFilter">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Suggested Filter (appears as a default option in filter settings without having to use the search box)"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="defaultOrder">
            {(field) => (
              <LWTooltip title="Rank this wikitag higher in lists of wikitags?" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Default order"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="descriptionTruncationCount">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Description truncation count"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="adminOnly">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Admin Only"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="canEditUserIds">
            {(field) => (
              <LWTooltip title="Only these authors will be able to edit the topic" placement="left-start" inlineBlock={false}>
              <TanStackUserMultiselect
                field={field}
                label="Restrict to these authors"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="deleted">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Deleted"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="needsReview">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Needs review"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="wikiGrade">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
  { value: 0, label: 'Uncategorized' },
  { value: 1, label: 'Flagged' },
  { value: 2, label: 'Stub' },
  { value: 3, label: 'C-Class' },
  { value: 4, label: 'B-Class' },
  { value: 5, label: 'A-Class' }
]}
                label="Wiki grade"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="wikiOnly">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Wiki only"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for bannerImageId */}
        <div className={classes.fieldWrapper}>
          <form.Field name="bannerImageId">
            {(field) => (
              <LWTooltip title="Minimum 200x600 px" placement="left-start" inlineBlock={false}>
              <TanStackImageUpload
                field={field}
                label="Banner Image"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for squareImageId */}
        <div className={classes.fieldWrapper}>
          <form.Field name="squareImageId">
            {(field) => (
              <LWTooltip title="Minimum 200x200 px" placement="left-start" inlineBlock={false}>
              <TanStackImageUpload
                field={field}
                label="Square Image"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="introSequenceId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Intro sequence ID"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: 'select' not yet ported - implement TanStackselect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="postsDefaultSortOrder">
            {(field) => (
              <TanStackselect
                field={field}
                options={[
<<<<<<< VERSION 1
  { value: 'relevance', label: 'Most Relevant' },
  { value: 'magic', label: 'Magic (New & Upvoted)' },
  { value: 'top', label: 'Top' },
  { value: 'topAdjusted', label: 'Top (Inflation Adjusted)' },
  { value: 'recentComments', label: 'Recent Comments' },
=======
  { value: 'relevance', label: 'Most relevant' },
  { value: 'magic', label: 'New & upvoted' },
  { value: 'top', label: 'Top' },
  { value: 'topAdjusted', label: 'Top (inflation-adjusted)' },
  { value: 'recentComments', label: 'Recent comments' },
>>>>>>> END
  { value: 'new', label: 'New' },
  { value: 'old', label: 'Old' }
]}
                label="Posts default sort order"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="canVoteOnRels">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Can vote on rels"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="isSubforum">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Is subforum"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="subforumModeratorIds">
            {(field) => (
              <TanStackUserMultiselect
                field={field}
                label="Subforum Moderators"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="subforumIntroPostId">
            {(field) => (
              <LWTooltip title="Dismissable intro post that will appear at the top of the subforum feed" placement="left-start" inlineBlock={false}>
              <TanStackMuiTextField
                field={field}
                label="Subforum intro post ID"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        {/* TODO: 'TagSelect' not yet ported - implement TanStackTagSelect */}
        <div className={classes.fieldWrapper}>
          <form.Field name="parentTagId">
            {(field) => (
              <LWTooltip title="Parent tag which will also be applied whenever this tag is applied to a post for the first time" placement="left-start" inlineBlock={false}>
              <TanStackTagSelect
                field={field}
                label="Parent Tag"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="autoTagModel">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Auto-tag classifier model ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="autoTagPrompt">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Auto-tag classifier prompt string"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="noindex">
            {(field) => (
              <LWTooltip title="Hide this wikitag from search engines" placement="left-start" inlineBlock={false}>
              <TanStackCheckbox
                field={field}
                label="No Index"
              />
              </LWTooltip>
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="coreTagId">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Core tag ID"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="forceAllowType3Audio">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Force Allow T3 Audio"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Sidebar Welcome Message" collapsed={true}>
        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="subforumWelcomeText">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: getDefaultLocalStorageIdGenerator('Tags'),
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="subforumWelcomeText"
                collectionName="Tags"
                commentEditor={false}
                commentStyles={false}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>
      <Components.FormGroupLayout label="Summaries" collapsed={true}>
        {/* TODO: 'SummariesEditForm' not yet ported - implement TanStackSummariesEditForm */}
        <div className={classes.fieldWrapper}>
          <form.Field name="summaries">
            {(field) => (
              <TanStackSummariesEditForm
                field={field}
                label="Summaries"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>

      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    MultiDocuments
    ================================================================
*/
export const TanStackMultiDocumentsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: MultiDocumentsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: MultiDocumentsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, MultiDocumentsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'MultiDocuments',
    fragmentName: 'MultiDocumentsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'MultiDocuments',
    fragmentName: 'MultiDocumentsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: MultiDocumentsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createMultiDocument.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateMultiDocument.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        {/* TODO: implement conditional visibility for title */}
        <div className={classes.fieldWrapper}>
          <form.Field name="title">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Title"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="tabTitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Tab title"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for tabSubtitle */}
        <div className={classes.fieldWrapper}>
          <form.Field name="tabSubtitle">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Tab subtitle"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: implement conditional visibility for slug */}
        <div className={classes.fieldWrapper}>
          <form.Field name="slug">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Slug"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: true
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="MultiDocuments"
                commentEditor={false}
                commentStyles={true}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="deleted">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Deleted"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="afBaseScore">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Alignment Base Score"
              />
            )}
          </form.Field>
        </div>

      <Components.FormGroupLayout label="Summaries" collapsed={false}>
        {/* TODO: 'SummariesEditForm' not yet ported - implement TanStackSummariesEditForm */}
        <div className={classes.fieldWrapper}>
          <form.Field name="summaries">
            {(field) => (
              <TanStackSummariesEditForm
                field={field}
                label="Summaries"
              />
            )}
          </form.Field>
        </div>
      </Components.FormGroupLayout>

      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};

/* ================================================================
    TagFlags
    ================================================================
*/
export const TanStackTagFlagsForm = ({
  initialData,
  currentUser,
  onSuccess,
}: {
  initialData?: TagFlagsInvalidQueryFragment; // TODO: use correct fragment type
  currentUser: UsersCurrent;
  onSuccess: (doc: TagFlagsInvalidMutationFragment) => void;
}) => {
  const classes = useStyles(sharedFieldStyles);
  const { LWTooltip, Error404 } = Components;

  const formType = initialData ? 'edit' : 'new';

  
  const { onSubmitCallback, onSuccessCallback, addOnSubmitCallback, addOnSuccessCallback } = useEditorFormCallbacks<typeof form.state.values, TagFlagsInvalidMutationFragment>();
  

  const { create } = useCreate({
    collectionName: 'TagFlags',
    fragmentName: 'TagFlagsInvalidMutationFragment', // TODO: use correct fragment type
  });

  const { mutate } = useUpdate({
    collectionName: 'TagFlags',
    fragmentName: 'TagFlagsInvalidMutationFragment', // TODO: use correct fragment type
  });

  /* ---- TanStack form instance -------------------------------- */
  const form = useForm({
    defaultValues: {
      ...initialData,
    },
    onSubmit: async ({ value }) => {
      if (onSubmitCallback.current) {
        value = await onSubmitCallback.current(value);
      }

      let result: TagFlagsInvalidMutationFragment;

      if (formType === 'new') {
        const { data } = await create({ data: value });
        result = data?.createTagFlag.data;
      } else {
        const { data } = await mutate({
          selector: { _id: initialData?._id },
          data: value,
        });
        result = data?.updateTagFlag.data;
      }
      
      if (onSuccessCallback.current) {
        result = onSuccessCallback.current(result, {});
      }
      
      
      onSuccess(value);
    },
  });

  if (formType === 'edit' && !initialData) {
    return <Error404 />;
  }

  return (
    <form className="vulcan-form" onSubmit={(e) => {
      e.preventDefault();
      e.stopPropagation();
      void form.handleSubmit();
    }}>
        <div className={classes.fieldWrapper}>
          <form.Field name="name">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                label="Name"
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="deleted">
            {(field) => (
              <TanStackCheckbox
                field={field}
                label="Deleted"
              />
            )}
          </form.Field>
        </div>

        {/* TODO: add custom validation (simpleSchema present) */}
        <div className={classes.fieldWrapper}>
          <form.Field name="contents">
            {(field) => (
              <TanStackEditor
                field={field}
                editableFieldOptions={{
  getLocalStorageId: [Function: getLocalStorageId],
  revisionsHaveCommitMessages: false
}}
                hintText={defaultEditorPlaceholder}
                fieldName="contents"
                collectionName="TagFlags"
                commentEditor={false}
                commentStyles={false}
                hideControls={false}
              />
            )}
          </form.Field>
        </div>

        <div className={classes.fieldWrapper}>
          <form.Field name="order">
            {(field) => (
              <TanStackMuiTextField
                field={field}
                type="number"
                label="Order"
              />
            )}
          </form.Field>
        </div>


      {/* TODO: check if there's a custom submit component */}
      <div className="form-submit">
        {/* TODO: check if there's a cancel callback - if not, delete this */}
        {/*<Button
          className={classNames("form-cancel", classes.formButton, classes.secondaryButton)}
          onClick={(e) => {
            e.preventDefault();
            cancelCallback(document)
          }}
        >
          {cancelLabel}
        </Button>*/}

        <form.Subscribe selector={(s) => [s.canSubmit, s.isSubmitting]}>
          {([canSubmit, isSubmitting]) => (
            <Button
              type="submit"
              disabled={!canSubmit || isSubmitting}
              className={classNames("primary-form-submit-button", classes.formButton, classes.submitButton)}
            >
              Submit
            </Button>
          )}
        </form.Subscribe>
      </div>
    </form>
  );
};
